;; Implementing IP over IP & Eth networks
;;
(set-logic UFBV)
(define-sort Addr () (_ BitVec 2))
(define-sort Loc () (_ BitVec 2))
(define-sort Index () (_ BitVec 2))

(declare-fun f (Index Addr Addr Addr) Addr)
(define-fun implements () Bool
  (forall ((ipDst Addr)      (dstMac Addr)      (srcMac Addr)
	   (finalIpDst Addr) (finalDstMac Addr) (finalSrcMac Addr)
	   (?_ip Addr) (?_smac Addr) (?!?!?_dmac Addr))
	  (=> (and (= ipDst finalIpDst ?_ip)
		   (= finalSrcMac ?_smac)
		   (= dstMac finalDstMac ?!?!?_dmac))
	      (and (= ipDst       (f #b00 ?_ip ?_smac ?!?!?_dmac))
		   (= finalIpDst  (f #b10 ?_ip ?_smac ?!?!?_dmac))
		   (= finalSrcMac (f #b11 ?_ip ?_smac ?!?!?_dmac))
		   (= finalDstMac (f #b01 ?_ip ?_smac ?!?!?_dmac))
		   ))))
;; (simplify implements)
(assert implements)
;; (apply (using-params qe :qe-nonlinear true))
;; (check-sat-using (then simplify (using-params qe :qe-nonlinear true) bit-blast smt))
;; (get-model)
(check-sat)
(get-model)
